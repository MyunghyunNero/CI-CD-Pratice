# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Gradle Package


on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build with Gradle
      run: ./gradlew build
      
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{secrets.DOCKERHUB_USERNAME}}
        password: ${{secrets.DOCKERHUB_TOKEN}}

    - name: Build and Push a Main Docker Image
      uses: docker/build-push-action@v3
      with:
        push: true
        tags: myunghyunnero/cicdtest:latest

    - name: copy file via ssh password
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.REMOTE_SSH_HOST }}
        username: ${{ secrets.REMOTE_SSH_USERNAME }}
        key: ${{ secrets.REMOTE_SSH_KEY }}
        port: ${{ secrets.REMOTE_SSH_PORT }}
        source: "docker-compose-prod.yml"
        target: "/home/ubuntu/app"

    - name: Run Main Docker
      uses: appleboy/ssh-action@master
      env:
        TARGET: "home/ubuntu/app"
      with:
        host: ${{ secrets.REMOTE_SSH_HOST }}
        port: ${{ secrets.REMOTE_SSH_PORT }}
        username: ${{ secrets.REMOTE_SSH_USERNAME }}
        key: ${{ secrets.REMOTE_SSH_KEY }}
        envs: TARGET
        script_stop: true
        script: |
          cd $TARGET
          docker compose -f docker-compose-production.yml pull
          docker compose -f docker-compose-production.yml up -d test
          docker image prune -af